{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Updater = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Mover_1 = require(\"./Mover\");\n\nvar Enums_1 = require(\"../../Enums\");\n\nvar Updater = function () {\n  function Updater(container, particle) {\n    this.container = container;\n    this.particle = particle;\n    this.mover = new Mover_1.Mover(container, particle);\n  }\n\n  Updater.checkBounds = function (coordinate, radius, size, velocity, outside) {\n    if (coordinate + radius > size && velocity > 0 || coordinate - radius < 0 && velocity < 0) {\n      outside();\n    }\n  };\n\n  Updater.prototype.update = function (delta) {\n    this.mover.move(delta);\n    this.updateOpacity(delta);\n    this.updateSize(delta);\n    this.updateAngle(delta);\n    this.updateColor(delta);\n    this.fixOutOfCanvasPosition(delta);\n    this.updateOutMode(delta);\n  };\n\n  Updater.prototype.updateOpacity = function (delta) {\n    var container = this.container;\n    var options = container.options;\n    var particle = this.particle;\n    var deltaFactor = options.fpsLimit > 0 ? 60 * delta / 1000 : 3.6;\n\n    if (particle.particlesOptions.opacity.animation.enable) {\n      switch (particle.opacity.status) {\n        case Enums_1.OpacityAnimationStatus.increasing:\n          if (particle.opacity.value >= particle.particlesOptions.opacity.value) {\n            particle.opacity.status = Enums_1.OpacityAnimationStatus.decreasing;\n          } else {\n            particle.opacity.value += (particle.opacity.velocity || 0) * deltaFactor;\n          }\n\n          break;\n\n        case Enums_1.OpacityAnimationStatus.decreasing:\n          if (particle.opacity.value <= particle.particlesOptions.opacity.animation.minimumValue) {\n            particle.opacity.status = Enums_1.OpacityAnimationStatus.increasing;\n          } else {\n            particle.opacity.value -= (particle.opacity.velocity || 0) * deltaFactor;\n          }\n\n          break;\n      }\n\n      if (particle.opacity.value < 0) {\n        particle.opacity.value = 0;\n      }\n    }\n  };\n\n  Updater.prototype.updateSize = function (delta) {\n    var _a;\n\n    var container = this.container;\n    var options = container.options;\n    var particle = this.particle;\n    var deltaFactor = options.fpsLimit > 0 ? 60 * delta / 1000 : 3.6;\n\n    if (particle.particlesOptions.size.animation.enable) {\n      switch (particle.size.status) {\n        case Enums_1.SizeAnimationStatus.increasing:\n          if (particle.size.value >= ((_a = particle.sizeValue) !== null && _a !== void 0 ? _a : container.retina.sizeValue)) {\n            particle.size.status = Enums_1.SizeAnimationStatus.decreasing;\n          } else {\n            particle.size.value += (particle.size.velocity || 0) * deltaFactor;\n          }\n\n          break;\n\n        case Enums_1.SizeAnimationStatus.decreasing:\n          if (particle.size.value <= particle.particlesOptions.size.animation.minimumValue) {\n            particle.size.status = Enums_1.SizeAnimationStatus.increasing;\n          } else {\n            particle.size.value -= (particle.size.velocity || 0) * deltaFactor;\n          }\n\n      }\n\n      if (particle.size.value < 0) {\n        particle.size.value = 0;\n      }\n    }\n  };\n\n  Updater.prototype.updateAngle = function (delta) {\n    var container = this.container;\n    var options = container.options;\n    var particle = this.particle;\n    var deltaFactor = options.fpsLimit > 0 ? 60 * delta / 1000 : 3.6;\n\n    if (particle.particlesOptions.rotate.animation.enable) {\n      switch (particle.rotateDirection) {\n        case Enums_1.RotateDirection.clockwise:\n          particle.angle += particle.particlesOptions.rotate.animation.speed * Math.PI / 18 * deltaFactor;\n\n          if (particle.angle > 360) {\n            particle.angle -= 360;\n          }\n\n          break;\n\n        case Enums_1.RotateDirection.counterClockwise:\n        default:\n          particle.angle -= particle.particlesOptions.rotate.animation.speed * Math.PI / 18 * deltaFactor;\n\n          if (particle.angle < 0) {\n            particle.angle += 360;\n          }\n\n          break;\n      }\n    }\n  };\n\n  Updater.prototype.updateColor = function (delta) {\n    var container = this.container;\n    var options = container.options;\n    var particle = this.particle;\n\n    if (particle.color === undefined) {\n      return;\n    }\n\n    var deltaFactor = options.fpsLimit > 0 ? 60 * delta / 1000 : 3.6;\n\n    if (particle.particlesOptions.color.animation.enable) {\n      particle.color.h += (particle.colorVelocity || 0) * deltaFactor;\n\n      if (particle.color.h > 360) {\n        particle.color.h -= 360;\n      }\n    }\n  };\n\n  Updater.prototype.fixOutOfCanvasPosition = function (_delta) {\n    var container = this.container;\n    var particle = this.particle;\n    var outMode = particle.particlesOptions.move.outMode;\n    var wrap = particle.particlesOptions.move.warp;\n    var canvasSize = container.canvas.size;\n    var newPos;\n\n    if (outMode === Enums_1.OutMode.bounce) {\n      newPos = {\n        bottom: canvasSize.height,\n        left: particle.size.value,\n        right: canvasSize.width,\n        top: particle.size.value\n      };\n    } else if (outMode === Enums_1.OutMode.bounceHorizontal) {\n      newPos = {\n        bottom: canvasSize.height + particle.size.value - particle.offset.y,\n        left: particle.size.value,\n        right: canvasSize.width,\n        top: -particle.size.value - particle.offset.y\n      };\n    } else if (outMode === Enums_1.OutMode.bounceVertical) {\n      newPos = {\n        bottom: canvasSize.height,\n        left: -particle.size.value - particle.offset.x,\n        right: canvasSize.width + particle.size.value + particle.offset.x,\n        top: particle.size.value\n      };\n    } else {\n      newPos = {\n        bottom: canvasSize.height + particle.size.value - particle.offset.y,\n        left: -particle.size.value - particle.offset.x,\n        right: canvasSize.width + particle.size.value + particle.offset.x,\n        top: -particle.size.value - particle.offset.y\n      };\n    }\n\n    if (outMode === Enums_1.OutMode.destroy) {\n      var sizeValue = particle.size.value;\n\n      if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, sizeValue)) {\n        container.particles.remove(particle);\n      }\n    } else {\n      var sizeValue = particle.size.value;\n      var nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n\n      if (nextBounds.left > canvasSize.width - particle.offset.x) {\n        particle.position.x = newPos.left;\n\n        if (!wrap) {\n          particle.position.y = Math.random() * canvasSize.height;\n        }\n      } else if (nextBounds.right < -particle.offset.x) {\n        particle.position.x = newPos.right;\n\n        if (!wrap) {\n          particle.position.y = Math.random() * canvasSize.height;\n        }\n      }\n\n      if (nextBounds.top > canvasSize.height - particle.offset.y) {\n        if (!wrap) {\n          particle.position.x = Math.random() * canvasSize.width;\n        }\n\n        particle.position.y = newPos.top;\n      } else if (nextBounds.bottom < -particle.offset.y) {\n        if (!wrap) {\n          particle.position.x = Math.random() * canvasSize.width;\n        }\n\n        particle.position.y = newPos.bottom;\n      }\n    }\n  };\n\n  Updater.prototype.updateOutMode = function (delta) {\n    var particle = this.particle;\n\n    switch (particle.particlesOptions.move.outMode) {\n      case Enums_1.OutMode.bounce:\n      case Enums_1.OutMode.bounceVertical:\n      case Enums_1.OutMode.bounceHorizontal:\n        this.updateBounce(delta);\n        break;\n    }\n  };\n\n  Updater.prototype.updateBounce = function (delta) {\n    var container = this.container;\n    var particle = this.particle;\n    var handled = false;\n\n    for (var id in container.plugins) {\n      var plugin = container.plugins[id];\n\n      if (plugin.particleBounce !== undefined) {\n        handled = plugin.particleBounce(particle, delta);\n      }\n\n      if (handled) {\n        break;\n      }\n    }\n\n    if (!handled) {\n      var outMode = particle.particlesOptions.move.outMode;\n      var pos = particle.getPosition();\n\n      if (outMode === Enums_1.OutMode.bounce || outMode === Enums_1.OutMode.bounceHorizontal) {\n        var size = particle.size.value;\n        var velocity = particle.velocity.horizontal;\n        Updater.checkBounds(pos.x, size, container.canvas.size.width, velocity, function () {\n          particle.velocity.horizontal *= -1;\n        });\n      }\n\n      if (outMode === Enums_1.OutMode.bounce || outMode === Enums_1.OutMode.bounceVertical) {\n        var size = particle.size.value;\n        var velocity = particle.velocity.vertical;\n        Updater.checkBounds(pos.y, size, container.canvas.size.height, velocity, function () {\n          particle.velocity.vertical *= -1;\n        });\n      }\n    }\n  };\n\n  return Updater;\n}();\n\nexports.Updater = Updater;","map":{"version":3,"sources":["/Volumes/AltDisk/Work/Learning/Udemy/Web Dev Course - Udemy/React/smartbrain/node_modules/tsparticles/dist/Core/Particle/Updater.js"],"names":["Object","defineProperty","exports","value","Updater","Utils_1","require","Mover_1","Enums_1","container","particle","mover","Mover","checkBounds","coordinate","radius","size","velocity","outside","prototype","update","delta","move","updateOpacity","updateSize","updateAngle","updateColor","fixOutOfCanvasPosition","updateOutMode","options","deltaFactor","fpsLimit","particlesOptions","opacity","animation","enable","status","OpacityAnimationStatus","increasing","decreasing","minimumValue","_a","SizeAnimationStatus","sizeValue","retina","rotate","rotateDirection","RotateDirection","clockwise","angle","speed","Math","PI","counterClockwise","color","undefined","h","colorVelocity","_delta","outMode","wrap","warp","canvasSize","canvas","newPos","OutMode","bounce","bottom","height","left","right","width","top","bounceHorizontal","offset","y","bounceVertical","x","destroy","Utils","isPointInside","position","particles","remove","nextBounds","calculateBounds","random","updateBounce","handled","id","plugins","plugin","particleBounce","pos","getPosition","horizontal","vertical"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Updater = void 0;\nvar Utils_1 = require(\"../../Utils\");\nvar Mover_1 = require(\"./Mover\");\nvar Enums_1 = require(\"../../Enums\");\nvar Updater = (function () {\n    function Updater(container, particle) {\n        this.container = container;\n        this.particle = particle;\n        this.mover = new Mover_1.Mover(container, particle);\n    }\n    Updater.checkBounds = function (coordinate, radius, size, velocity, outside) {\n        if ((coordinate + radius > size && velocity > 0) || (coordinate - radius < 0 && velocity < 0)) {\n            outside();\n        }\n    };\n    Updater.prototype.update = function (delta) {\n        this.mover.move(delta);\n        this.updateOpacity(delta);\n        this.updateSize(delta);\n        this.updateAngle(delta);\n        this.updateColor(delta);\n        this.fixOutOfCanvasPosition(delta);\n        this.updateOutMode(delta);\n    };\n    Updater.prototype.updateOpacity = function (delta) {\n        var container = this.container;\n        var options = container.options;\n        var particle = this.particle;\n        var deltaFactor = options.fpsLimit > 0 ? (60 * delta) / 1000 : 3.6;\n        if (particle.particlesOptions.opacity.animation.enable) {\n            switch (particle.opacity.status) {\n                case Enums_1.OpacityAnimationStatus.increasing:\n                    if (particle.opacity.value >= particle.particlesOptions.opacity.value) {\n                        particle.opacity.status = Enums_1.OpacityAnimationStatus.decreasing;\n                    }\n                    else {\n                        particle.opacity.value += (particle.opacity.velocity || 0) * deltaFactor;\n                    }\n                    break;\n                case Enums_1.OpacityAnimationStatus.decreasing:\n                    if (particle.opacity.value <= particle.particlesOptions.opacity.animation.minimumValue) {\n                        particle.opacity.status = Enums_1.OpacityAnimationStatus.increasing;\n                    }\n                    else {\n                        particle.opacity.value -= (particle.opacity.velocity || 0) * deltaFactor;\n                    }\n                    break;\n            }\n            if (particle.opacity.value < 0) {\n                particle.opacity.value = 0;\n            }\n        }\n    };\n    Updater.prototype.updateSize = function (delta) {\n        var _a;\n        var container = this.container;\n        var options = container.options;\n        var particle = this.particle;\n        var deltaFactor = options.fpsLimit > 0 ? (60 * delta) / 1000 : 3.6;\n        if (particle.particlesOptions.size.animation.enable) {\n            switch (particle.size.status) {\n                case Enums_1.SizeAnimationStatus.increasing:\n                    if (particle.size.value >= ((_a = particle.sizeValue) !== null && _a !== void 0 ? _a : container.retina.sizeValue)) {\n                        particle.size.status = Enums_1.SizeAnimationStatus.decreasing;\n                    }\n                    else {\n                        particle.size.value += (particle.size.velocity || 0) * deltaFactor;\n                    }\n                    break;\n                case Enums_1.SizeAnimationStatus.decreasing:\n                    if (particle.size.value <= particle.particlesOptions.size.animation.minimumValue) {\n                        particle.size.status = Enums_1.SizeAnimationStatus.increasing;\n                    }\n                    else {\n                        particle.size.value -= (particle.size.velocity || 0) * deltaFactor;\n                    }\n            }\n            if (particle.size.value < 0) {\n                particle.size.value = 0;\n            }\n        }\n    };\n    Updater.prototype.updateAngle = function (delta) {\n        var container = this.container;\n        var options = container.options;\n        var particle = this.particle;\n        var deltaFactor = options.fpsLimit > 0 ? (60 * delta) / 1000 : 3.6;\n        if (particle.particlesOptions.rotate.animation.enable) {\n            switch (particle.rotateDirection) {\n                case Enums_1.RotateDirection.clockwise:\n                    particle.angle += ((particle.particlesOptions.rotate.animation.speed * Math.PI) / 18) * deltaFactor;\n                    if (particle.angle > 360) {\n                        particle.angle -= 360;\n                    }\n                    break;\n                case Enums_1.RotateDirection.counterClockwise:\n                default:\n                    particle.angle -= ((particle.particlesOptions.rotate.animation.speed * Math.PI) / 18) * deltaFactor;\n                    if (particle.angle < 0) {\n                        particle.angle += 360;\n                    }\n                    break;\n            }\n        }\n    };\n    Updater.prototype.updateColor = function (delta) {\n        var container = this.container;\n        var options = container.options;\n        var particle = this.particle;\n        if (particle.color === undefined) {\n            return;\n        }\n        var deltaFactor = options.fpsLimit > 0 ? (60 * delta) / 1000 : 3.6;\n        if (particle.particlesOptions.color.animation.enable) {\n            particle.color.h += (particle.colorVelocity || 0) * deltaFactor;\n            if (particle.color.h > 360) {\n                particle.color.h -= 360;\n            }\n        }\n    };\n    Updater.prototype.fixOutOfCanvasPosition = function (_delta) {\n        var container = this.container;\n        var particle = this.particle;\n        var outMode = particle.particlesOptions.move.outMode;\n        var wrap = particle.particlesOptions.move.warp;\n        var canvasSize = container.canvas.size;\n        var newPos;\n        if (outMode === Enums_1.OutMode.bounce) {\n            newPos = {\n                bottom: canvasSize.height,\n                left: particle.size.value,\n                right: canvasSize.width,\n                top: particle.size.value,\n            };\n        }\n        else if (outMode === Enums_1.OutMode.bounceHorizontal) {\n            newPos = {\n                bottom: canvasSize.height + particle.size.value - particle.offset.y,\n                left: particle.size.value,\n                right: canvasSize.width,\n                top: -particle.size.value - particle.offset.y,\n            };\n        }\n        else if (outMode === Enums_1.OutMode.bounceVertical) {\n            newPos = {\n                bottom: canvasSize.height,\n                left: -particle.size.value - particle.offset.x,\n                right: canvasSize.width + particle.size.value + particle.offset.x,\n                top: particle.size.value,\n            };\n        }\n        else {\n            newPos = {\n                bottom: canvasSize.height + particle.size.value - particle.offset.y,\n                left: -particle.size.value - particle.offset.x,\n                right: canvasSize.width + particle.size.value + particle.offset.x,\n                top: -particle.size.value - particle.offset.y,\n            };\n        }\n        if (outMode === Enums_1.OutMode.destroy) {\n            var sizeValue = particle.size.value;\n            if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, sizeValue)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            var sizeValue = particle.size.value;\n            var nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n            if (nextBounds.left > canvasSize.width - particle.offset.x) {\n                particle.position.x = newPos.left;\n                if (!wrap) {\n                    particle.position.y = Math.random() * canvasSize.height;\n                }\n            }\n            else if (nextBounds.right < -particle.offset.x) {\n                particle.position.x = newPos.right;\n                if (!wrap) {\n                    particle.position.y = Math.random() * canvasSize.height;\n                }\n            }\n            if (nextBounds.top > canvasSize.height - particle.offset.y) {\n                if (!wrap) {\n                    particle.position.x = Math.random() * canvasSize.width;\n                }\n                particle.position.y = newPos.top;\n            }\n            else if (nextBounds.bottom < -particle.offset.y) {\n                if (!wrap) {\n                    particle.position.x = Math.random() * canvasSize.width;\n                }\n                particle.position.y = newPos.bottom;\n            }\n        }\n    };\n    Updater.prototype.updateOutMode = function (delta) {\n        var particle = this.particle;\n        switch (particle.particlesOptions.move.outMode) {\n            case Enums_1.OutMode.bounce:\n            case Enums_1.OutMode.bounceVertical:\n            case Enums_1.OutMode.bounceHorizontal:\n                this.updateBounce(delta);\n                break;\n        }\n    };\n    Updater.prototype.updateBounce = function (delta) {\n        var container = this.container;\n        var particle = this.particle;\n        var handled = false;\n        for (var id in container.plugins) {\n            var plugin = container.plugins[id];\n            if (plugin.particleBounce !== undefined) {\n                handled = plugin.particleBounce(particle, delta);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (!handled) {\n            var outMode = particle.particlesOptions.move.outMode;\n            var pos = particle.getPosition();\n            if (outMode === Enums_1.OutMode.bounce || outMode === Enums_1.OutMode.bounceHorizontal) {\n                var size = particle.size.value;\n                var velocity = particle.velocity.horizontal;\n                Updater.checkBounds(pos.x, size, container.canvas.size.width, velocity, function () {\n                    particle.velocity.horizontal *= -1;\n                });\n            }\n            if (outMode === Enums_1.OutMode.bounce || outMode === Enums_1.OutMode.bounceVertical) {\n                var size = particle.size.value;\n                var velocity = particle.velocity.vertical;\n                Updater.checkBounds(pos.y, size, container.canvas.size.height, velocity, function () {\n                    particle.velocity.vertical *= -1;\n                });\n            }\n        }\n    };\n    return Updater;\n}());\nexports.Updater = Updater;\n"]},"metadata":{},"sourceType":"script"}