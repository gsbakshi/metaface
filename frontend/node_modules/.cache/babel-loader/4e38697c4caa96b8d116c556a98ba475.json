{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Grabber = void 0;\n\nvar Utils_1 = require(\"../../../../Utils\");\n\nvar Grabber = function () {\n  function Grabber() {}\n\n  Grabber.grab = function (container, _delta) {\n    var _a, _b;\n\n    var options = container.options;\n    var interactivity = options.interactivity;\n\n    if (interactivity.events.onHover.enable && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n      var mousePos = container.interactivity.mouse.position;\n\n      if (mousePos === undefined) {\n        return;\n      }\n\n      var distance = container.retina.grabModeDistance;\n      var query = container.particles.quadTree.query(new Utils_1.Circle(mousePos.x, mousePos.y, distance));\n\n      for (var _i = 0, query_1 = query; _i < query_1.length; _i++) {\n        var particle = query_1[_i];\n        var pos = particle.getPosition();\n        var distance_1 = Utils_1.Utils.getDistance(pos, mousePos);\n\n        if (distance_1 <= container.retina.grabModeDistance) {\n          var grabLineOptions = interactivity.modes.grab.links;\n          var lineOpacity = grabLineOptions.opacity;\n          var grabDistance = container.retina.grabModeDistance;\n          var opacityLine = lineOpacity - distance_1 * lineOpacity / grabDistance;\n\n          if (opacityLine > 0) {\n            var optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.particlesOptions.links.color;\n\n            if (!container.particles.grabLineColor) {\n              container.particles.grabLineColor = optColor === Utils_1.Constants.randomColorValue || ((_b = optColor) === null || _b === void 0 ? void 0 : _b.value) === Utils_1.Constants.randomColorValue ? Utils_1.Constants.randomColorValue : Utils_1.ColorUtils.colorToRgb(optColor);\n            }\n\n            var colorLine = void 0;\n\n            if (container.particles.grabLineColor === Utils_1.Constants.randomColorValue) {\n              colorLine = Utils_1.ColorUtils.getRandomRgbColor();\n            } else {\n              colorLine = container.particles.grabLineColor;\n            }\n\n            if (colorLine === undefined) {\n              return;\n            }\n\n            container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n          }\n        }\n      }\n    }\n  };\n\n  return Grabber;\n}();\n\nexports.Grabber = Grabber;","map":{"version":3,"sources":["/Users/guru/Desktop/Development/React/smartbrain/node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js"],"names":["Object","defineProperty","exports","value","Grabber","Utils_1","require","grab","container","_delta","_a","_b","options","interactivity","events","onHover","enable","status","Constants","mouseMoveEvent","mousePos","mouse","position","undefined","distance","retina","grabModeDistance","query","particles","quadTree","Circle","x","y","_i","query_1","length","particle","pos","getPosition","distance_1","Utils","getDistance","grabLineOptions","modes","links","lineOpacity","opacity","grabDistance","opacityLine","optColor","color","particlesOptions","grabLineColor","randomColorValue","ColorUtils","colorToRgb","colorLine","getRandomRgbColor","canvas","drawGrabLine"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Grabber = void 0;\nvar Utils_1 = require(\"../../../../Utils\");\nvar Grabber = (function () {\n    function Grabber() {\n    }\n    Grabber.grab = function (container, _delta) {\n        var _a, _b;\n        var options = container.options;\n        var interactivity = options.interactivity;\n        if (interactivity.events.onHover.enable && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n            var mousePos = container.interactivity.mouse.position;\n            if (mousePos === undefined) {\n                return;\n            }\n            var distance = container.retina.grabModeDistance;\n            var query = container.particles.quadTree.query(new Utils_1.Circle(mousePos.x, mousePos.y, distance));\n            for (var _i = 0, query_1 = query; _i < query_1.length; _i++) {\n                var particle = query_1[_i];\n                var pos = particle.getPosition();\n                var distance_1 = Utils_1.Utils.getDistance(pos, mousePos);\n                if (distance_1 <= container.retina.grabModeDistance) {\n                    var grabLineOptions = interactivity.modes.grab.links;\n                    var lineOpacity = grabLineOptions.opacity;\n                    var grabDistance = container.retina.grabModeDistance;\n                    var opacityLine = lineOpacity - (distance_1 * lineOpacity) / grabDistance;\n                    if (opacityLine > 0) {\n                        var optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.particlesOptions.links.color;\n                        if (!container.particles.grabLineColor) {\n                            container.particles.grabLineColor =\n                                optColor === Utils_1.Constants.randomColorValue ||\n                                    ((_b = optColor) === null || _b === void 0 ? void 0 : _b.value) === Utils_1.Constants.randomColorValue\n                                    ? Utils_1.Constants.randomColorValue\n                                    : Utils_1.ColorUtils.colorToRgb(optColor);\n                        }\n                        var colorLine = void 0;\n                        if (container.particles.grabLineColor === Utils_1.Constants.randomColorValue) {\n                            colorLine = Utils_1.ColorUtils.getRandomRgbColor();\n                        }\n                        else {\n                            colorLine = container.particles.grabLineColor;\n                        }\n                        if (colorLine === undefined) {\n                            return;\n                        }\n                        container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n                    }\n                }\n            }\n        }\n    };\n    return Grabber;\n}());\nexports.Grabber = Grabber;\n"]},"metadata":{},"sourceType":"script"}