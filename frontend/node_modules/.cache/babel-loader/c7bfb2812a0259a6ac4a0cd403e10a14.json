{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mover = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Enums_1 = require(\"../../Enums\");\n\nvar Mover = function () {\n  function Mover(container, particle) {\n    this.container = container;\n    this.particle = particle;\n  }\n\n  Mover.calcNoiseValue = function (input, size, noiseValue) {\n    return Math.floor(input / size) / noiseValue.value + noiseValue.offset;\n  };\n\n  Mover.prototype.move = function (delta) {\n    var _a;\n\n    var container = this.container;\n    var options = container.options;\n    var particle = this.particle;\n    var particlesOptions = particle.particlesOptions;\n\n    if (particlesOptions.move.enable) {\n      var slowFactor = this.getProximitySpeedFactor();\n      var deltaFactor = options.fpsLimit > 0 ? 60 * delta / 1000 : 3.6;\n      var baseSpeed = (_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : container.retina.moveSpeed;\n      var moveSpeed = baseSpeed / 2 * slowFactor * deltaFactor;\n      var noiseOptions = particlesOptions.move.noise;\n      var noiseEnabled = noiseOptions.enable;\n\n      if (noiseEnabled) {\n        if (particle.lastNoiseTime > particle.noiseDelay) {\n          var position = particle.position;\n          var noiseFactor = noiseOptions.factor;\n          var simplex = container.simplex;\n          var noise = {\n            angle: simplex.noise3D(Mover.calcNoiseValue(position.x, particle.size.value, noiseFactor.horizontal), Mover.calcNoiseValue(position.y, particle.size.value, noiseFactor.horizontal), container.particles.noiseZ),\n            length: simplex.noise3D(Mover.calcNoiseValue(position.x, particle.size.value, noiseFactor.vertical), Mover.calcNoiseValue(position.y, particle.size.value, noiseFactor.vertical), container.particles.noiseZ)\n          };\n          particle.velocity.horizontal += Math.cos(noise.angle) * noise.length;\n          particle.velocity.horizontal = Utils_1.Utils.clamp(particle.velocity.horizontal, -1, 1);\n          particle.velocity.vertical += Math.sin(noise.angle) * noise.length;\n          particle.velocity.vertical = Utils_1.Utils.clamp(particle.velocity.vertical, -1, 1);\n          particle.lastNoiseTime -= particle.noiseDelay;\n        } else {\n          particle.lastNoiseTime += delta;\n        }\n      }\n\n      particle.position.x += particle.velocity.horizontal * moveSpeed;\n      particle.position.y += particle.velocity.vertical * moveSpeed;\n\n      if (particlesOptions.move.vibrate) {\n        particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n        particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n      }\n    }\n\n    this.moveParallax(delta);\n  };\n\n  Mover.prototype.moveParallax = function (_delta) {\n    var container = this.container;\n    var options = container.options;\n\n    if (!options.interactivity.events.onHover.parallax.enable) {\n      return;\n    }\n\n    var particle = this.particle;\n    var parallaxForce = options.interactivity.events.onHover.parallax.force;\n    var mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    var windowDimension = {\n      height: window.innerHeight / 2,\n      width: window.innerWidth / 2\n    };\n    var parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n    var tmp = {\n      x: (mousePos.x - windowDimension.width) * (particle.size.value / parallaxForce),\n      y: (mousePos.y - windowDimension.height) * (particle.size.value / parallaxForce)\n    };\n    particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n    particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n  };\n\n  Mover.prototype.getProximitySpeedFactor = function () {\n    var container = this.container;\n    var options = container.options;\n    var particle = this.particle;\n    var active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n\n    if (!active) {\n      return 1;\n    }\n\n    var mousePos = this.container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return 1;\n    }\n\n    var particlePos = particle.getPosition();\n    var dist = Utils_1.Utils.getDistance(mousePos, particlePos);\n    var radius = container.retina.slowModeRadius;\n\n    if (dist > radius) {\n      return 1;\n    }\n\n    var proximityFactor = dist / radius || 0;\n    var slowFactor = options.interactivity.modes.slow.factor;\n    return proximityFactor / slowFactor;\n  };\n\n  return Mover;\n}();\n\nexports.Mover = Mover;","map":{"version":3,"sources":["/Users/guru/Desktop/Development/React/smartbrain/node_modules/tsparticles/dist/Core/Particle/Mover.js"],"names":["Object","defineProperty","exports","value","Mover","Utils_1","require","Enums_1","container","particle","calcNoiseValue","input","size","noiseValue","Math","floor","offset","prototype","move","delta","_a","options","particlesOptions","enable","slowFactor","getProximitySpeedFactor","deltaFactor","fpsLimit","baseSpeed","moveSpeed","retina","noiseOptions","noise","noiseEnabled","lastNoiseTime","noiseDelay","position","noiseFactor","factor","simplex","angle","noise3D","x","horizontal","y","particles","noiseZ","length","vertical","velocity","cos","Utils","clamp","sin","vibrate","moveParallax","_delta","interactivity","events","onHover","parallax","parallaxForce","force","mousePos","mouse","windowDimension","height","window","innerHeight","width","innerWidth","parallaxSmooth","smooth","tmp","active","isInArray","HoverMode","slow","mode","particlePos","getPosition","dist","getDistance","radius","slowModeRadius","proximityFactor","modes"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Mover = void 0;\nvar Utils_1 = require(\"../../Utils\");\nvar Enums_1 = require(\"../../Enums\");\nvar Mover = (function () {\n    function Mover(container, particle) {\n        this.container = container;\n        this.particle = particle;\n    }\n    Mover.calcNoiseValue = function (input, size, noiseValue) {\n        return Math.floor(input / size) / noiseValue.value + noiseValue.offset;\n    };\n    Mover.prototype.move = function (delta) {\n        var _a;\n        var container = this.container;\n        var options = container.options;\n        var particle = this.particle;\n        var particlesOptions = particle.particlesOptions;\n        if (particlesOptions.move.enable) {\n            var slowFactor = this.getProximitySpeedFactor();\n            var deltaFactor = options.fpsLimit > 0 ? (60 * delta) / 1000 : 3.6;\n            var baseSpeed = (_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : container.retina.moveSpeed;\n            var moveSpeed = (baseSpeed / 2) * slowFactor * deltaFactor;\n            var noiseOptions = particlesOptions.move.noise;\n            var noiseEnabled = noiseOptions.enable;\n            if (noiseEnabled) {\n                if (particle.lastNoiseTime > particle.noiseDelay) {\n                    var position = particle.position;\n                    var noiseFactor = noiseOptions.factor;\n                    var simplex = container.simplex;\n                    var noise = {\n                        angle: simplex.noise3D(Mover.calcNoiseValue(position.x, particle.size.value, noiseFactor.horizontal), Mover.calcNoiseValue(position.y, particle.size.value, noiseFactor.horizontal), container.particles.noiseZ),\n                        length: simplex.noise3D(Mover.calcNoiseValue(position.x, particle.size.value, noiseFactor.vertical), Mover.calcNoiseValue(position.y, particle.size.value, noiseFactor.vertical), container.particles.noiseZ),\n                    };\n                    particle.velocity.horizontal += Math.cos(noise.angle) * noise.length;\n                    particle.velocity.horizontal = Utils_1.Utils.clamp(particle.velocity.horizontal, -1, 1);\n                    particle.velocity.vertical += Math.sin(noise.angle) * noise.length;\n                    particle.velocity.vertical = Utils_1.Utils.clamp(particle.velocity.vertical, -1, 1);\n                    particle.lastNoiseTime -= particle.noiseDelay;\n                }\n                else {\n                    particle.lastNoiseTime += delta;\n                }\n            }\n            particle.position.x += particle.velocity.horizontal * moveSpeed;\n            particle.position.y += particle.velocity.vertical * moveSpeed;\n            if (particlesOptions.move.vibrate) {\n                particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n                particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n            }\n        }\n        this.moveParallax(delta);\n    };\n    Mover.prototype.moveParallax = function (_delta) {\n        var container = this.container;\n        var options = container.options;\n        if (!options.interactivity.events.onHover.parallax.enable) {\n            return;\n        }\n        var particle = this.particle;\n        var parallaxForce = options.interactivity.events.onHover.parallax.force;\n        var mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        var windowDimension = {\n            height: window.innerHeight / 2,\n            width: window.innerWidth / 2,\n        };\n        var parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n        var tmp = {\n            x: (mousePos.x - windowDimension.width) * (particle.size.value / parallaxForce),\n            y: (mousePos.y - windowDimension.height) * (particle.size.value / parallaxForce),\n        };\n        particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n        particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    };\n    Mover.prototype.getProximitySpeedFactor = function () {\n        var container = this.container;\n        var options = container.options;\n        var particle = this.particle;\n        var active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n        if (!active) {\n            return 1;\n        }\n        var mousePos = this.container.interactivity.mouse.position;\n        if (!mousePos) {\n            return 1;\n        }\n        var particlePos = particle.getPosition();\n        var dist = Utils_1.Utils.getDistance(mousePos, particlePos);\n        var radius = container.retina.slowModeRadius;\n        if (dist > radius) {\n            return 1;\n        }\n        var proximityFactor = dist / radius || 0;\n        var slowFactor = options.interactivity.modes.slow.factor;\n        return proximityFactor / slowFactor;\n    };\n    return Mover;\n}());\nexports.Mover = Mover;\n"]},"metadata":{},"sourceType":"script"}