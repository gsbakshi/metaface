{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Plugins = void 0;\n\nvar Plugins = function () {\n  function Plugins() {}\n\n  Plugins.getPlugin = function (plugin) {\n    return this.plugins.filter(function (t) {\n      return t.id === plugin;\n    })[0];\n  };\n\n  Plugins.addPlugin = function (plugin) {\n    if (!this.getPlugin(plugin.id)) {\n      this.plugins.push(plugin);\n    }\n  };\n\n  Plugins.getAvailablePlugins = function (container) {\n    var res = {};\n    var availablePlugins = this.plugins.filter(function (t) {\n      return t.needsPlugin(container.sourceOptions);\n    });\n\n    for (var _i = 0, availablePlugins_1 = availablePlugins; _i < availablePlugins_1.length; _i++) {\n      var plugin = availablePlugins_1[_i];\n      res[plugin.id] = plugin.getPlugin(container);\n    }\n\n    return res;\n  };\n\n  Plugins.loadOptions = function (options, sourceOptions) {\n    for (var _i = 0, _a = this.plugins; _i < _a.length; _i++) {\n      var plugin = _a[_i];\n      plugin.loadOptions(options, sourceOptions);\n    }\n  };\n\n  Plugins.getPreset = function (preset) {\n    return this.presets[preset];\n  };\n\n  Plugins.addPreset = function (presetKey, options) {\n    if (!this.getPreset(presetKey)) {\n      this.presets[presetKey] = options;\n    }\n  };\n\n  Plugins.addShapeDrawer = function (type, drawer) {\n    if (!this.drawers[type]) {\n      this.drawers[type] = drawer;\n    }\n  };\n\n  Plugins.getShapeDrawer = function (type) {\n    return this.drawers[type];\n  };\n\n  Plugins.getSupportedShapes = function () {\n    return Object.keys(this.drawers);\n  };\n\n  Plugins.plugins = [];\n  Plugins.presets = {};\n  Plugins.drawers = {};\n  return Plugins;\n}();\n\nexports.Plugins = Plugins;","map":{"version":3,"sources":["/Users/guru/Desktop/Development/React/smartbrain/node_modules/tsparticles/dist/Utils/Plugins.js"],"names":["Object","defineProperty","exports","value","Plugins","getPlugin","plugin","plugins","filter","t","id","addPlugin","push","getAvailablePlugins","container","res","availablePlugins","needsPlugin","sourceOptions","_i","availablePlugins_1","length","loadOptions","options","_a","getPreset","preset","presets","addPreset","presetKey","addShapeDrawer","type","drawer","drawers","getShapeDrawer","getSupportedShapes","keys"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Plugins = void 0;\nvar Plugins = (function () {\n    function Plugins() {\n    }\n    Plugins.getPlugin = function (plugin) {\n        return this.plugins.filter(function (t) { return t.id === plugin; })[0];\n    };\n    Plugins.addPlugin = function (plugin) {\n        if (!this.getPlugin(plugin.id)) {\n            this.plugins.push(plugin);\n        }\n    };\n    Plugins.getAvailablePlugins = function (container) {\n        var res = {};\n        var availablePlugins = this.plugins.filter(function (t) { return t.needsPlugin(container.sourceOptions); });\n        for (var _i = 0, availablePlugins_1 = availablePlugins; _i < availablePlugins_1.length; _i++) {\n            var plugin = availablePlugins_1[_i];\n            res[plugin.id] = plugin.getPlugin(container);\n        }\n        return res;\n    };\n    Plugins.loadOptions = function (options, sourceOptions) {\n        for (var _i = 0, _a = this.plugins; _i < _a.length; _i++) {\n            var plugin = _a[_i];\n            plugin.loadOptions(options, sourceOptions);\n        }\n    };\n    Plugins.getPreset = function (preset) {\n        return this.presets[preset];\n    };\n    Plugins.addPreset = function (presetKey, options) {\n        if (!this.getPreset(presetKey)) {\n            this.presets[presetKey] = options;\n        }\n    };\n    Plugins.addShapeDrawer = function (type, drawer) {\n        if (!this.drawers[type]) {\n            this.drawers[type] = drawer;\n        }\n    };\n    Plugins.getShapeDrawer = function (type) {\n        return this.drawers[type];\n    };\n    Plugins.getSupportedShapes = function () {\n        return Object.keys(this.drawers);\n    };\n    Plugins.plugins = [];\n    Plugins.presets = {};\n    Plugins.drawers = {};\n    return Plugins;\n}());\nexports.Plugins = Plugins;\n"]},"metadata":{},"sourceType":"script"}