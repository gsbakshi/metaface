version: "3.8"

services:
  # React App - Frontend
  frontend:
    container_name: client
    build:
      context: ./client
      # Uncomment this target for development build
      # target: development
      args:
        # - NODE_ENV=development
        - NODE_ENV=production
        - PORT=3000
    environment:
      - CI=true
    working_dir: /home/node/app
    volumes:
      - ./client/src:/home/node/app/src:ro
      - /home/node/app/node_modules
    depends_on:
      - backend
    networks:
      - client-side
    ports:
      # Port forwarding for production app
      - 3000:80
      # Port forwarding for development app
      # - 3000:3000

  # Express Server - Backend
  backend:
    container_name: server
    build:
      context: ./server
      args:
        # - NODE_ENV=development
        - NODE_ENV=production
        - PORT=80
    restart: always
    env_file:
      - ./.env
    environment:
      POSTGRES_URI: postgres://metaface:docker@db:5432/metaface
      REDIS_URI: redis://redis:6379
    working_dir: /home/node/app
    # Uncomment command in development build to watch changes with nodemon
    # command: npm run start-watch
    volumes:
      - ./server:/home/node/app
      - backend-cache:/home/node/app/node_modules
    depends_on:
      - db
      - redis
    networks:
      - client-side
      - server-side
    ports:
      - 80:80
      - 9229:9229
      - 9230:9230

  # Redis - Cache
  redis:
    image: redis:6.2.6-alpine3.14
    networks:
      - server-side
    ports:
      - 6379:6379

  # PostgreSQL - Database
  db:
    container_name: postgres
    build: ./postgres
    restart: always
    environment:
      POSTGRES_USER: metaface
      POSTGRES_PASSWORD: docker
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks:
      - server-side
    ports:
      - 5432:5432

# Not in use currently. Need to enable docker swarm to allow secrets to work properly.
# secrets:
#   pg-password:
#     file: secrets/pg_password.txt
#   clarifai-api:
#     file: secrets/clarifai_api_key.txt

volumes:
  backend-cache: {}
  pg-data: {}

networks:
  client-side: {}
  server-side: {}
